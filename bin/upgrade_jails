#!/usr/bin/env python3

# upgrade a set of iocage jails.
# must be run as root or as a user with
# iocage permissions.

# for some reason,
# you might need to type in 'y' periodically,
# because you won't see the prompt on the CLI
# to answer 'y'.

# example 'jails_list.json':
# {
#     "__version": "1.0.0",
#     "jails": [
#         {
#             "jail_name": "foo",
#             "permit_cron_update": true,
#             "has_ports": false
#         },
#         {
#             "jail_name": "bar",
#             "permit_cron_update": true,
#             "has_ports": true
#         },
#         {
#             "jail_name": "baz",
#             "permit_cron_update": false,
#             "has_ports": true
#         }
#     ]
# }

import argparse
import json
import os
import subprocess
import sys


def main():
    parser = argparse.ArgumentParser(
        description="Update a set of iocage jails defined by a json file.",
    )

    parser.add_argument(
        "--jails-list",
        dest="jails_list",
        help=(
            "file listing jails to work on. "
            "default is '$XDG_CONFIG_HOME/jails_list.json'. "
            "will expand shell vars and $HOME."
        ),
        type=str,
        default="$XDG_CONFIG_HOME/jails_list.json",
    )

    parser.add_argument(
        "--cron",
        dest="cron",
        help=(
            "whether this is being called as part of a "
            "cron job. jails can be configured to refuse "
            "updates from cron jobs, if you want to only "
            "manually update them. "
        ),
        action="store_true",
        default=False,
    )

    parser.add_argument(
        "--not-cron",
        dest="cron",
        help=(
            "whether this is being called as part of a "
            "cron job (inverse of --cron). jails can "
            "be configured to refuse updates from cron "
            "jobs, if you want to only manually update "
            "them. "
        ),
        action="store_false",
    )

    parser.add_argument(
        "--perform-freebsd-update",
        dest="perform_freebsd_update",
        help="whether to perform FreeBSD version update in addition to pkg update.",
        action="store_true",
        default=False,
    )

    args = parser.parse_args()

    jail_list = os.path.expanduser(args.jails_list)
    jail_list = os.path.expandvars(args.jails_list)

    with open(jail_list, "r") as f:
        try:
            json_content = json.load(f)

        except json.decoder.JSONDecodeError as e:
            print("Failure loading json file, have to exit.")
            print(f"Error is\n{e}")
            sys.exit(1)

    for jail_obj in json_content["jails"]:
        jail_name = jail_obj["jail_name"]

        # best practice (as I understand it) for cron jobs
        # is to be silent unless something happens.
        # so we continue if in cron mode and we must skip
        # a jail.
        if args.cron and not jail_obj.get("permit_cron_update", False):
            continue

        # handle ports if necessary.
        # if there ARE ports, do everything through
        # portupgrade for consistency.
        # NOTE - this is less thoroughly tested than the
        # pkg route
        if jail_obj.get("has_ports", False):
            # fetch new ports.
            subprocess.run([
                "iocage",
                "exec",
                jail_name,
                "portsnap fetch update",
            ])

            # upgrade ports with portupgrade.
            subprocess.run([
                "iocage",
                "exec",
                jail_name,
                "portupgrade -a -m BATCH=yes --batch",
            ])

            # clean work directories.
            subprocess.run([
                "iocage",
                "exec",
                jail_name,
                "portsclean -Di",
            ])

        else:
            command = [
                "iocage",
                "pkg",
                jail_name,
                "upgrade",
            ]

            # again, run silently in cron mode,
            # unless something goes wrong.
            if args.cron:
                subprocess.run(command, stdout=subprocess.DEVNULL)

            else:
                print(
                    "\n"
                    f"updating jail {jail_name}..."
                )
                subprocess.run(command)

        if args.perform_freebsd_update:

            command = [
                "iocage",
                "update",
                jail_name,
            ]

            if args.cron:
                subprocess.run(command, stdout=subprocess.DEVNULL)

            else:
                print(
                    "\n"
                    f"performing freebsd update on {jail_name}"
                )
                subprocess.run(command)


if __name__ == "__main__":
    main()
