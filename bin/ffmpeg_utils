#!/usr/bin/env python3

import argparse
import datetime
import os
import subprocess


def birdsite_safe(*, videos):
    """
    process a video or videos,
    so that the bird social media site SHOULD accept it.
    will convert into h264 and aac and get it down to 720p.
    """

    for video in videos:
        video_pieces = video.rsplit(".", 1)
        output_filename = f"{video_pieces[0]}.birdsite.{video_pieces[1]}"

        print(f"Converting {video} for social media...")
        subprocess.run([
            "ffmpeg",
            "-i", video,
            "-vf", "scale=-1:720",
            "-c:v", "libx264",
            "-crf", "25",
            "-c:a", "aac",
            output_filename,
        ])


def snip(*, video, start_time, end_time, output_filename):
    """
    snip a section from a video, from start to end time.
    """

    if output_filename is None:
        video_pieces = video.rsplit(".", 1)
        output_filename = f"{video_pieces[0]}.snip.{video_pieces[1]}"

    print(f"Snipping {video} from {start_time} to {end_time}...")
    subprocess.run([
        "ffmpeg",
        "-i", video,
        "-vcodec", "copy",
        "-acodec", "copy",
        "-ss", start_time,
        "-to", end_time,
        output_filename,
    ])


def shrink(*, video, width, height, output_filename):
    """
    shrink a video to a new resolution.
    assumes the new dimensions are smaller and that the ratio is the same,
    unknown what will happen if you break these assumptions.
    """

    if output_filename is None:
        video_pieces = video.rsplit(".", 1)
        output_filename = f"{video_pieces[0]}.smaller.{video_pieces[1]}"

    print(f"Shrinking {video} to {width}x{height}...")
    subprocess.run([
        "ffmpeg",
        "-i", video,
        "-vf", f"scale='{width}x{height}",
        output_filename,
    ])


def gif_to_mkv(*, files):
    """
    convert a bunch of GIF files to mkv videos,
    which will tend to be smaller for the same quality.
    """

    for file in files:

        print(f"Converting {file} to h264 mkv file...")
        subprocess.run([
            "ffmpeg",
            "-i", file,
            "-c:v", "libx264",
            "-pix_fmt", "yuv420p",
            "-vf", "scale=trunc(iw/2)*2:trunc(ih/2)*2",
            f"{file}.mkv",
        ])


def bulk_mkv_copy(*, directory, target_extension, attempt_convert, crf):
    """
    copy a bunch of files with the target extension into mkv files.
    copy if attempt_convert is false, otherwise try to convert to aac/h264.
    crf is quality factor to be used for encoding.
    """

    files = sorted([
        os.path.join(directory, f)
        for f in os.listdir(directory)
        if os.path.isfile(os.path.join(directory, f))
    ])

    for file in files:
        if file.endswith(target_extension):
            print(f"Processing {file}...")

            file_parts = file.rsplit(".", 1)
            new_file = f"{file_parts[0]}.mkv"

            if attempt_convert:
                acodec = "aac"
                vcodec = "h264"
            else:
                acodec = "copy"
                vcodec = "copy"

            command = [
                "ffmpeg",
                "-i", file,
                "-c", "copy",
                "-c:a", acodec,
                "-c:v", vcodec,
            ]

            if crf is not None:
                command.extend([
                    "-crf", crf,
                ])

            command.extend([
                "-map", "0:v",
                "-map", "0:a",
                "-map", "0:s?",
                new_file,
            ])

            subprocess.run(command)


def gif(*, video, scale, fps, palette_file, skip_writing_palette):
    """make GIF of input video."""

    if palette_file is None:
        palette_file = "/tmp/palette.png"

    if not skip_writing_palette:
        subprocess.run([
            "ffmpeg",
            "-v", "warning",
            "-i", video,
            "-vf", f"fps={fps},scale=-1:{scale}:flags=lanczos,palettegen",
            "-y", palette_file,
        ])

    subprocess.run([
        "ffmpeg",
        "-v", "warning",
        "-i", video,
        "-i", palette_file,
        "-lavfi",
        f"fps={fps},scale=-1:{scale}:flags=lanczos [x]; [x][1:v] paletteuse",
        "-y", f"{video}.gif",
    ])


def run(args):
    """Attempt to run named command."""
    command = args.command

    if command == "gif":
        gif(
            video=args.VIDEO,
            scale=args.scale,
            fps=args.fps,
            palette_file=args.palette_file,
            skip_writing_palette=args.skip_writing_palette,
        )

    elif command == "bulk_mkv_copy":
        bulk_mkv_copy(
            directory=args.directory,
            target_extension=args.TARGET_EXTENSION,
            attempt_convert=args.attempt_convert,
            crf=args.crf,
        )

    elif command == "gif_to_mkv":
        gif_to_mkv(
            files=args.FILES,
        )

    elif command == "shrink":
        shrink(
            video=args.VIDEO,
            width=args.width,
            height=args.height,
            output_filename=args.output_filename,
        )

    elif command == "snip":
        snip(
            video=args.VIDEO,
            start_time=args.start_time,
            end_time=args.end_time,
            output_filename=args.output_filename,
        )

    elif command == "birdsite_safe":
        birdsite_safe(videos=args.VIDEO)


def main():
    parser = argparse.ArgumentParser(
        description="Run various ffmpeg utility functions.",
    )

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = "command"
    subparsers.help = "command help"

    birdsite_safe_command = subparsers.add_parser(
        "birdsite_safe",
        help="convert one or more videos for the bird social media site",
    )
    birdsite_safe_command.add_argument(
        "VIDEO",
        nargs="+",
        help="input file(s) to convert",
    )

    snip_command = subparsers.add_parser(
        "snip",
        help="snip a video from start to end time",
    )
    snip_command.add_argument(
        "VIDEO",
        help="input file to convert",
    )
    snip_command.add_argument(
        "--start-time",
        dest="start_time",
        help=(
            "start time to snip from, "
            "in HH:MM:SS.mmm format (m is microseconds)"
        ),
        required=True,
        type=valid_ffmpeg_timestamp,
    )
    snip_command.add_argument(
        "--end-time",
        dest="end_time",
        help=(
            "end time to snip from, "
            "in HH:MM:SS.mmm format (m is microseconds)"
        ),
        required=True,
        type=valid_ffmpeg_timestamp,
    )
    snip_command.add_argument(
        "--output-filename",
        dest="output_filename",
        help=("desired output filename. "
              "default: INPUT_FILENAME.snip.INPUT_EXTENSION"),
    )

    shrink_command = subparsers.add_parser(
        "shrink",
        help="shrink a video to provided dimensions",
    )
    shrink_command.add_argument(
        "VIDEO",
        help="input file to convert",
    )
    shrink_command.add_argument(
        "--width",
        help="width in pixels for shrunk output video",
        required=True,
    )
    shrink_command.add_argument(
        "--height",
        help="height in pixels for shrunk output video",
        required=True,
    )
    shrink_command.add_argument(
        "--output-filename",
        dest="output_filename",
        help=("desired output filename. "
              "default: INPUT_FILENAME.smaller.INPUT_EXTENSION"),
    )

    gif_to_mkv_command = subparsers.add_parser(
        "gif_to_mkv",
        help="convert one or more GIF files to h264 mkv videos",
    )
    gif_to_mkv_command.add_argument(
        "FILES",
        nargs="+",
        help="file(s) to convert",
    )

    bulk_mkv_copy_command = subparsers.add_parser(
        "bulk_mkv_copy",
        help="bulk copy files to mkv containers",
    )
    bulk_mkv_copy_command.add_argument(
        "TARGET_EXTENSION",
        type=str,
        help="target extension to act on. no default, must be supplied",
    )
    bulk_mkv_copy_command.add_argument(
        "--directory",
        type=str,
        help="directory to act on. default: current directory.",
        default=os.getcwd(),
    )
    bulk_mkv_copy_command.add_argument(
        "--attempt-convert",
        action="store_true",
        dest="attempt_convert",
        help="attempt to convert audio to aac and video to h264",
        default=False,
    )
    bulk_mkv_copy_command.add_argument(
        "--crf",
        type=str,
        help=(
            "quality factor to be used in ffmpeg encode. "
            "0-51, 18 being lowest reasonable, ~24 is ffmpeg's default"
        ),
        default=None,
    )

    gif_command = subparsers.add_parser(
        "gif",
        help="make GIF of input video",
    )
    gif_command.add_argument(
        "VIDEO",
        type=str,
        help="video file to make into GIF",
    )
    gif_command.add_argument(
        "--scale",
        type=int,
        help=(
            "horizontal pixels of output GIF. "
            "default: 720"
        ),
        default=720,
    )
    gif_command.add_argument(
        "--fps",
        type=int,
        help=(
            "frames per second of output GIF. "
            "default: 30"
        ),
        default=30,
    )
    gif_command.add_argument(
        "--palette-file",
        type=str,
        dest="palette_file",
        help=(
            "file to write GIF palette to. "
            "default: /tmp/palette.png"
        ),
        default=None,
    )
    gif_command.add_argument(
        "--skip-writing-palette",
        action="store_true",
        dest="skip_writing_palette",
        help=(
            "whether to skip the command of having ffmpeg generate a palette. "
            "you only want this if you've done a previous GIF run, "
            "or if you somehow have created a palette yourself. "
            "default: False"
        ),
        default=False,
    )

    args = parser.parse_args()
    run(args)


def valid_ffmpeg_timestamp(timestamp):
    """Validate timestamp is of form HH:MM:SS.mmm."""
    try:
        # %f means microseconds,
        # but if we pass milliseconds in as microseconds,
        # it should be fine.
        time = datetime.datetime.strptime(timestamp, "%H:%M:%S.%f")
        return time.strftime("%M:%M:%S.%f")[:-3]
    except ValueError:
        raise argparse.ArgumentTypeError(
            f"Date {timestamp} formatted incorrectly. "
            f"Should be 'HH.MM.SS.mmm' "
            "(hours, minutes, seconds, microseconds)."
        )


if __name__ == "__main__":
    main()
