#!/usr/bin/env python3

import argparse
import datetime
import os
import subprocess

def gif_to_mkv(*, files):
    """
    convert a bunch of GIF files to mkv videos, which will tend to be smaller for the same quality.
    """

    for file in files:

        print(f"Converting {file} to h264 mkv file...")
        file_tokens = file.rsplit(".", 1)

        mkv_out = f"{file_tokens[0]}.mkv"
        subprocess.run([
            "ffmpeg",
            "-i", file,
            "-c:v", "libx264",
            "-pix_fmt", "yuv420p",
            "-vf", "scale=trunc(iw/2)*2:trunc(ih/2)*2",
            mkv_out,
        ])

def bulk_mkv_copy(*, directory, target_extension, attempt_convert, crf):
    """
    copy a bunch of files with the target extension into mkv files.
    copy if attempt_convert is false, otherwise try to convert to aac/h264.
    crf is quality factor to be used for encoding.
    """

    files = sorted([
        os.path.join(directory, f)
        for f in os.listdir(directory)
        if os.path.isfile(os.path.join(directory, f))
    ])

    for file in files:
        if file.endswith(target_extension):
            print(f"Processing {file}...")

            file_parts = file.rsplit(".", 1)
            new_file = f"{file_parts[0]}.mkv"

            if attempt_convert:
                acodec = "aac"
                vcodec = "h264"
            else:
                acodec = "copy"
                vcodec = "copy"

            command = [
                "ffmpeg",
                "-i", file,
                "-c", "copy",
                "-c:a", acodec,
                "-c:v", vcodec,
            ]

            if crf is not None:
                command.extend([
                    "-crf", crf,
                ])

            command.extend([
                "-map", "0:v",
                "-map", "0:a",
                "-map", "0:s?",
                new_file,
            ])

            subprocess.run(command)


def gif(*, video, scale, fps):
    """make GIF of input video."""

    PALETTE_LOCATION = "/tmp/palette.png"

    subprocess.run([
        "ffmpeg",
        "-v", "warning",
        "-i", video,
        "-vf", f"fps={fps},scale=-1:{scale}:flags=lanczos,palettegen",
        "-y", PALETTE_LOCATION,
    ])
    subprocess.run([
        "ffmpeg",
        "-v", "warning",
        "-i", video,
        "-i", PALETTE_LOCATION,
        "-lavfi", f"fps={fps},scale=-1:{scale}:flags=lanczos [x]; [x][1:v] paletteuse",
        "-y", f"{video}.gif",
    ])

def run(args):
    """Attempt to run named command."""
    command = args.command

    if command == "gif":
        gif(video=args.VIDEO, scale=args.scale, fps=args.fps)

    elif command == "bulk_mkv_copy":
        bulk_mkv_copy(
            directory=args.directory,
            target_extension=args.TARGET_EXTENSION,
            attempt_convert=args.attempt_convert,
            crf=args.crf,
        )

    elif command == "gif_to_mkv":
        gif_to_mkv(
            files=args.FILES,
        )

def main():
    parser = argparse.ArgumentParser(
        description="Run various ffmpeg utility functions.",
    )

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = "command"
    subparsers.help = "command help"

    gif_to_mkv_step = subparsers.add_parser(
        "gif_to_mkv",
        help="convert one or more GIF files to h264 mkv videos",
    )
    gif_to_mkv_step.add_argument(
        "FILES",
        nargs="+",
        help="file(s) to convert",
    )

    bulk_mkv_copy_step = subparsers.add_parser(
        "bulk_mkv_copy",
        help="bulk copy files to mkv containers",
    )
    bulk_mkv_copy_step.add_argument(
        "TARGET_EXTENSION",
        type=str,
        help="target extension to act on. no default, must be supplied",
    )
    bulk_mkv_copy_step.add_argument(
        "--directory",
        type=str,
        help="directory to act on. Default: current directory.",
        default=os.getcwd(),
    )
    bulk_mkv_copy_step.add_argument(
        "--attempt_convert",
        type=bool,
        help="attempt to convert audio to aac and video to h264",
        default=False,
    )
    bulk_mkv_copy_step.add_argument(
        "--crf",
        type=str,
        help=("quality factor to be used in ffmpeg encode. "
              "0-51, 18 being lowest reasonable, ~24 is ffmpeg's default"),
        default=None,
    )

    gif_step = subparsers.add_parser(
        "gif",
        help="make GIF of input video",
    )
    gif_step.add_argument(
        "VIDEO",
        type=str,
        help="video file to make into GIF",
    )
    gif_step.add_argument(
        "--scale",
        type=int,
        help="horizontal pixels of output GIF. default: 720",
        default=720,
    )
    gif_step.add_argument(
        "--fps",
        type=int,
        help="frames per second of output GIF. default: 30",
        default=30,
    )

    args = parser.parse_args()
    run(args)

if __name__ == "__main__":
    main()
