#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

def main():
    parser = argparse.ArgumentParser(
        description="sets up base16 themes across i3, bash, nvim",
    )

    prefix = "base16-"

    parser.add_argument(
        "--colorscheme",
        help="colorscheme to use.",
        type=str,
        default=f"{prefix}default",
    )

    args = parser.parse_args()

    # ensure theme is a full base16-XXXX string, so URLs work
    COLORSCHEME = args.colorscheme
    print(f"foo {COLORSCHEME[0:len(prefix)]}")
    if COLORSCHEME[0:len(prefix)] != prefix:
        COLORSCHEME = f"{prefix}{COLORSCHEME}"

    print(f"received theme '{COLORSCHEME}'")

    XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", None)
    HOME = os.environ["HOME"]
    PLATFORM = sys.platform

    if XDG_CONFIG_HOME is None:

        if platform == "darwin":
            XDG_CONFIG_HOME = os.path.join(
                HOME,
                "Library",
                "Preferences",
            )
        else:
            XDG_CONFIG_HOME = os.path.join(
                HOME,
                ".config",
            )

    # just in case
    os.makedirs(XDG_CONFIG_HOME, exist_ok=True)

    print("writing xresources file from theme...")
    # source or retrieve xresources
    # cached file or freshly fetched file
    XR_FILENAME = f"{COLORSCHEME}-256.Xresources"
    XR_FULLPATH = os.path.join(
        XDG_CONFIG_HOME,
        "xresources",
        XR_FILENAME,
    )
    XR_CURRENT = os.path.join(
        XDG_CONFIG_HOME,
        "xresources",
        "xresources-current",
    )

    if os.path.isfile(XR_FULLPATH) or os.path.islink(XR_FULLPATH):
        os.remove(XR_CURRENT)
        os.symlink(XR_FULLPATH, XR_CURRENT)
        subprocess.run(["xrdb", XR_CURRENT])

    else:
        os.makedirs(
            os.path.join(XDG_CONFIG_HOME, "xresources"),
            exist_ok=True,
        )
        URL_BASE = "https://raw.githubusercontent.com/chriskempson/base16-xresources/master"
        URL = f"{URL_BASE}/xresources/{XR_FILENAME}"

        # check for presence - also checking for valid theme
        returncode = 0
        try:
            subprocess.check_output([
                "curl",
                "--output",
                "/dev/null",
                "--silent",
                "--head",
                "--fail",
                URL,
            ])
        except subprocess.CalledProcessError as e:
            returncode = e.returncode

        if returncode == 0:
            with open(XR_FULLPATH, "w") as f:
                subprocess.run(
                    [
                        "curl",
                        URL,
                        "--silent",
                    ],
                    stdout=f,
                )
            os.remove(XR_CURRENT)
            os.symlink(XR_FULLPATH, XR_CURRENT)
            subprocess.run(["xrdb", XR_CURRENT])

        else:
            print(f"failed to curl theme {COLORSCHEME}, invalid theme")
            sys.exit(1)

    # to work for i3,
    # this requires set_from_resources lines in your config -
    # see github.com/alixnovosi/config/blob/master/config/i3/config
    print("reloading i3...")
    subprocess.run(
        ["i3", "reload"],
        stdout=subprocess.DEVNULL,
    )

    # set neovim theme
    print("setting neovim from theme...")
    NVIM_FILE = os.path.join(
        XDG_CONFIG_HOME,
        "nvim",
        "theme.vim",
    )
    with open(NVIM_FILE, "w") as f:
        f.write(f"colorscheme {COLORSCHEME}")

    print("setting shell/tmux theme...")
    # source or retrieve shell script to config shell
    # again, either cached file or freshly fetched file
    SHELL_FILENAME = f"{COLORSCHEME}.sh"
    SHELL_FULLPATH = os.path.join(
        XDG_CONFIG_HOME,
        "base16-shell",
        SHELL_FILENAME,
    )
    SHELL_CURRENT = os.path.join(
        XDG_CONFIG_HOME,
        "base16-shell",
        "shell-current.sh",
    )

    if os.path.isfile(SHELL_FULLPATH):
        os.remove(SHELL_CURRENT)
        os.symlink(SHELL_FULLPATH, SHELL_CURRENT)

    else:
        os.makedirs(
            os.path.join(
                XDG_CONFIG_HOME,
                "base16-shell",
            ),
            exist_ok=True,
        )
        URL_BASE = "https://raw.githubusercontent.com/chriskempson/base16-shell/master"
        URL = f"{URL_BASE}/scripts/{SHELL_FILENAME}"

        # check for presence - also checking for valid theme
        returncode = 0
        try:
            subprocess.check_output([
                "curl",
                "--output",
                "/dev/null",
                "--silent",
                "--head",
                "--fail",
                URL,
            ])
        except subprocess.CalledProcessError as e:
            returncode = e.returncode

        if returncode == 0:
            with open(SHELL_FULLPATH, "w") as f:
                subprocess.run(
                    [
                        "curl",
                        URL,
                        "--silent",
                    ],
                    stdout=f,
                )
            os.remove(SHELL_CURRENT)
            os.symlink(SHELL_FULLPATH, SHELL_CURRENT)

        else:
            print(
                f"failed to curl theme {COLORSCHEME}- "
                "invalid theme for shell but not xresources?"
            )
            sys.exit(1)


if __name__ == "__main__":
    main()
