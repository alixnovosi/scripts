#!/usr/bin/env python3

import argparse
import enum

class Symbols(enum.Enum):
    celsius = "°C"
    fahrenheit = "°F"
    kelvin = "K"
    rankine = "R"

MODES = {
    "ctof": {
        "description": "celsius to fahrenheit",
        "formula": lambda x: (float(x) * (9/5)) + 32,
        "symbol": Symbols.fahrenheit,
    },
    "ctok": {
        "description": "celsius to kelvin",
        "formula": lambda x: float(x) + 273.15,
        "symbol": Symbols.kelvin,
    },
    "ctor": {
        "description": "celsius to rankine",
        "formula": lambda x:(float(x) + 273.15) * (9/5),
        "symbol": Symbols.rankine,
    },

    "ftoc": {
        "description": "fahrenheit to celsius",
        "formula": lambda x: (float(x) - 33) * (5/9),
        "symbol": Symbols.celsius,
    },
    "ftok": {
        "description": "fahrenheit to kelvin",
        "formula": lambda x: (float(x) + 459.67) * (5/9),
        "symbol": Symbols.kelvin,
    },
    "ftor": {
        "description": "fahrenheit to rankine",
        "formula": lambda x: float(x) + 459.67,
        "symbol": Symbols.rankine,
    },
}


def run(*, mode, temperatures):
    """run appropriate temperature conversion"""
    mode_obj = MODES[mode]
    display_lambda = lambda x: f"{round(mode_obj['formula'](x), 2)} {mode_obj['symbol'].value}"

    print(" ".join(map(display_lambda, temperatures)))


def main():
    """CLI handling"""
    parser = argparse.ArgumentParser(
        description="run one of various temperature conversions",
    )

    descriptions = ", ".join(map(lambda kv: f"{kv[0]} ({kv[1]['description']})", MODES.items()))
    parser.add_argument(
        "MODE",
        help=(
            f"conversion mode. options are: {descriptions}"
        ),
    )
    parser.add_argument(
        "TEMPERATURE",
        nargs="+",
        help="temperature(s) to convert",
    )

    args = parser.parse_args()
    run(mode=args.MODE, temperatures=args.TEMPERATURE)


if __name__ == "__main__":
    main()
