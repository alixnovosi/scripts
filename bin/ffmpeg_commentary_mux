#!/usr/bin/env python3

import argparse
import datetime
import json
import subprocess

# This is a set of commands to let you take a third-party audio commentary of a movie,
# and add it to your video copy of the movie with a low-volume soundtrack backing it.
# There isn't yet a guided command to walk you through it,
# so this comment will have to do.
# This assumes you have access to a command-line and the video/audio manipulator program ffmpeg.
#
# 1) Identify audio tracks.
# Run 'ffmpeg_commentary_mux identify_audio VIDEO_FILE'.
# This will list all audio tracks, just the index (beginning at zero), language, codec, and
# channels.
# You want the stream in your language with the most channels.
# Remember the index, language, and codec.
#
# 2) Extract audio track.
# Run 'ffmpeg_commentary_mux extract VIDEO_FILE OUTPUT_FILENAME --track-index INDEX'.
# Output filename can be whatever you like, but it must end in the codec you discovered before.
# If you know what you're doing, you can specify another extension and ffmpeg will attempt to
# transcode it for you.
# Specify the index you discovered in the previous step.
#
# 3) Align third-party commentary with movie soundtrack.
# Before doing this step, you need two timestamps. First find the timestamp in the third-party
# commentary where the commentary actually starts. Second, find the timestamp in the movie that
# matches when the commentary begins ("our commentary starts when the Universal logo begins to fade
# out").
# Both timestamps will need to be formatted as
# "HH:MM:SS.mmm" (hours, minutes, seconds, # milliseconds).
# You can specify an output filename (--output-filename FOO.aac) if you like.
# Otherwise, you'll get INPUT_FILENAME.aligned.INPUT_EXTENSION.
# Run 'ffmpeg_commentary_mux align COMMENTARY_FILENAME COMMENTARY_TIMESTAMP MOVIE_TIMESTAMP'
#
# 4) Merge movie soundtrack with commentary.
# You'll need to provide the filename of the soundtrack created in step 1, the filename of the
# third-party commentary, aligned from the previous step, and an output filename.
# The extension of your output filename will be ignored, as an mkv container will be made.
# You may add a codec (--codec CODEC) if you want to transcode the final file,
# a language if you want to change the language tag for the final track (--language English),
# and a title if you want to change the title for the final track (--title "Commentary Track").
# Run 'ffmpeg_commentary_mux amerge SOUNDTRACK_FILENAME COMMENTARY_ALIGNED_FILENAME \
# COMMENTARY_FILENAME [--codec CODEC --language LANGUAGE --title TITLE]'
#
# 5) Add final commentary track to movie.
# Run 'ffmpeg_commentary_mux CONTAINER_FILENAME COMMENTARY_FILENAME [--output-filename OUTPUT]'
# Output filename is optional, it'll use CONTAINER_FILENAME.final.CONTAINER_FILENAME_EXTENSION by
# default

# I've found audio tracks on most movies to be at this sampling frequency.
SAMPLING_FREQUENCY = 48000  # Hz

# 64k per channel.
BITRATE = "128k"

def identify_audio(*, video_filename):
    """Identify audio tracks and their codecs on a video file."""

    commands = [
        "ffprobe",
        "-v", "quiet",
        "-print_format", "json",
        "-show_streams",
        "-i", video_filename]

    subprocess_result = subprocess.run(
        commands,
        encoding="utf-8",
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    raw_result = subprocess_result.stdout
    result_dict = json.loads("".join(raw_result))

    identified_audio = []
    for stream in result_dict["streams"]:
        if stream["codec_type"] == "audio":
            index = stream["index"]
            codec = stream["codec_name"]
            channels = stream["channels"]

            result = [
                "\n",
                f"Index: {index-1}",
            ]

            if "tags" in stream:
                tags = stream["tags"]
                if "title" in tags:
                    result.append(f"Title: {tags['title']}")
                if "language" in tags:
                    result.append(f"Language: {tags['language']}")

            result.extend([
                f"Codec: {codec}",
                f"Channels: {channels}",
            ])

            identified_audio.append("\n".join(result))

    print("".join(identified_audio)[1:])

def extract(*, video_filename, output_filename, track_index):
    """Extract audio track from video file to specified output file as stereo track."""

    commands = [
        "ffmpeg",
        "-i", video_filename,
        "-map", f"0:a:{track_index}",
        "-vol", "64",
        "-af", "pan=stereo|FL=FC+0.30*FL+0.30*BL|FR=FC+0.30*FR+0.30*BR",
        output_filename,
    ]

    subprocess.run(commands)

def align(
        *,
        input_filename,
        cut_timestamp,
        align_timestamp,
        output_filename=None,
):
    """
    Align an audio file with a second target audio file.
    Do this by trimming the input file so that it starts at the first provided timestamp,
    and then padding it so it matches the second provided timestamp.
    This is meant to start the content you care about in the input file at the same time as the
    target time in the second file.
    Timestamp MUST be specified as HH:MM:SS.mmm.
    """
    if output_filename == None:
        input_split = input_filename.rsplit(".", 1)
        output_filename = f"{input_split[0]}.aligned.{input_split[1]}"

    # need to convert second timestamp to milliseconds.
    # we're hacking timestamps here by just putting milliseconds in as microseconds,
    # because python doesn't seem to support milliseconds in the timestamp,
    # so we just get them out the same way.
    align_millis = (align_timestamp.hour * 3600 * 1000) + \
        (align_timestamp.minute * 60 * 1000) + \
        (align_timestamp.second * 1000) + \
        align_timestamp.microsecond

    # strftime outputs microseconds with six places of precision,
    # and ffmpeg wants only three.
    cut_timestamp_str = cut_timestamp.strftime("%H:%M:%S.%f")[:12]

    commands = [
        "ffmpeg",
        "-ss", cut_timestamp_str,
        "-i", input_filename,

        # audio files sometimes have image tracks,
        # and we don't want to output them.
        "-map", "0:a:0",

        "-filter_complex", f"adelay={align_millis}|{align_millis}",
        "-ar", f"{SAMPLING_FREQUENCY}",
        output_filename
    ]

    subprocess.run(commands)

def amerge(
        *,
        filename_one,
        filename_two,
        output_file,
        codec,
        language=None,
        title=None,
):
    """
    Merge two tracks together into an audio-only mkv container,
    using specified audio codec.
    The final track will be present twice in the container,
    because ffmpeg won't let a sole audio track in a container have no disposition,
    and if we're adding this track to another container later,
    we want it to have no disposition.
    Finished tracks will be as long as the first track.
    Optionally specify language tag and title.
    """
    commands = [
        "ffmpeg",
        "-i", filename_one,
        "-i", filename_two,
        "-filter_complex", "[0:a:0][1:a:0]amix=inputs=2:duration=first,asplit=2[a][b]",
        "-ac", "2",
        "-c:a", codec,
        "-b:a", f"{BITRATE}",
        "-map", "[a]",
        "-map", "[b]",
    ]

    if language is not None:
        commands.extend([
            "-metadata:s:a:0", f"language={language}",
        ])

    if title is not None:
        commands.extend([
            "-metadata:s:a:0", f"title={title}",
        ])

    commands.extend([
        "-disposition:a:0", "0",
        "-disposition:a:1", "default",
        f"{output_file}.mkv"
    ])

    subprocess.run(commands)

def commentary_mux(
        *,
        commentary_filename,
        container_filename,
        output_filename=None,
):
    """
    Add a commentary track to an existing container,
    producing a new output file.
    """
    if output_filename is None:
        container_split = container_filename.rsplit(".", 1)
        output_filename = f"{container_split[0]}.final.{container_split[1]}"

    commands = [
        "ffmpeg",
        "-i", container_filename,
        "-i", commentary_filename,
        "-c", "copy",
        "-map", "0:v", "-map", "0:a", "-map", "1:a:0", "-map", "0:s",
        "-ac", "2",
        output_filename
    ]

    subprocess.run(commands)

def run(args):
    """Attempt to run named command."""
    step = args.process_step

    if step == "identify_audio":
        identify_audio(
            video_filename=args.VIDEO,
        )

    elif step == "extract":
        extract(
            video_filename=args.VIDEO,
            output_filename=args.OUTPUT,
            track_index=args.track_index
        )

    elif step == "align":
        align(
            input_filename=args.INPUT_FILENAME,
            cut_timestamp=args.CUT_TIMESTAMP,
            align_timestamp=args.ALIGN_TIMESTAMP,
            output_filename=args.output_filename,
        )

    elif step == "amerge":
        amerge(
            filename_one=args.FILENAME_ONE,
            filename_two=args.FILENAME_TWO,
            output_file=args.OUTPUT_FILE,
            codec=args.codec,
            language=args.language,
            title=args.title,
        )

    elif step == "commentary_mux":
        commentary_mux(
            commentary_filename=args.COMMENTARY_FILENAME,
            container_filename=args.CONTAINER_FILENAME,
            output_filename=args.output_filename,
        )

def main():
    parser = argparse.ArgumentParser(
        description="Run ffmpeg commands to mux additional audio track.")

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = "process_step"
    subparsers.help = "process_step help"

    identify_audio_step = subparsers.add_parser(
        "identify_audio",
        help="list audio tracks on a video file, and their codecs",
    )
    identify_audio_step.add_argument(
        "VIDEO",
        type=str,
        help="video file to identify tracks on",
    )

    extract_step = subparsers.add_parser(
        "extract",
        help="extract soundtrack as stereo track without rencoding",
    )
    extract_step.add_argument(
        "VIDEO",
        type=str,
        help="video file to extract from",
    )
    extract_step.add_argument(
        "OUTPUT",
        type=str,
        help=("file to export audio to. ffmpeg will choose encoder based on extension, "
              "so provide it"),
    )
    extract_step.add_argument(
        "--track-index",
        type=int,
        help=("index (indices start at ZERO) of target audio track - defaults to 0"),
        default=0,
    )

    align_step = subparsers.add_parser(
        "align",
        help="align audio track to second audio track",
    )
    align_step.add_argument(
        "INPUT_FILENAME",
        type=str,
        help="input file to align",
    )
    align_step.add_argument(
        "CUT_TIMESTAMP",
        type=valid_ffmpeg_timestamp,
        help="timestamp to trim to in input file",
    )
    align_step.add_argument(
        "ALIGN_TIMESTAMP",
        type=valid_ffmpeg_timestamp,
        help="timestamp to pad input file to align it",
    )
    align_step.add_argument(
        "--output-filename",
        type=str,
        help=("output filename for aligned file - default is based on input filename. "
              "ffmpeg will choose encoder based on extension, so provide it"),
    )

    amerge_step = subparsers.add_parser(
        "amerge",
        help=("merge two audio tracks into one audio-only mkv container. "
              "a container is used because it can store language tags and titles."),
    )
    amerge_step.add_argument(
        "FILENAME_ONE",
         type=str,
         help="first file to merge",
    )
    amerge_step.add_argument(
        "FILENAME_TWO",
         type=str,
         help="second file to merge",
    )
    amerge_step.add_argument(
        "OUTPUT_FILE",
         type=str,
         help="output filename for merged file. extension 'mkv' will be added to this."
    )
    amerge_step.add_argument(
        "--language",
        type=str,
        help="language tag for output audio track. default: none set",
        default=None,
    )
    amerge_step.add_argument(
        "--title",
        type=str,
        help="title for output audio track. default: none set",
        default=None,
    )
    amerge_step.add_argument(
        "--codec",
        type=str,
        help="codec for audio track of output mkv container. default: aac",
        default="aac",
    )

    commentary_mux_step = subparsers.add_parser(
        "commentary_mux",
        help=("add a commentary file to a container with existing video, "
              "audio, and subtitle tracks, creating a new final file"),
    )
    commentary_mux_step.add_argument(
        "COMMENTARY_FILENAME",
        type=str,
        help="commentary file to add to container (commentary.aac)",
    )
    commentary_mux_step.add_argument(
        "CONTAINER_FILENAME",
        type=str,
        help="name of container (feature_film.mkv)",
    )
    commentary_mux_step.add_argument(
        "--output_filename",
        type=str,
        help=("output filename for merged file. "
              "ffmpeg will choose encoder based on extension, so provide it. "
              "default: CONTAINER_FILENAME.final.CONTAINER_EXTENSION (so, feature_film.final.mkv)"),
        default=None,
    )

    args = parser.parse_args()
    run(args)

def valid_ffmpeg_timestamp(timestamp):
    """Validate timestamp is of form HH:MM:SS.mmm."""
    try:
        # %f means microseconds,
        # but if we pass milliseconds in as microseconds,
        # it should be fine.
        return datetime.datetime.strptime(timestamp, "%H:%M:%S.%f")
    except ValueError:
        raise argparse.ArgumentTypeError(
            f"Date {timestamp} formatted incorrectly. "
            f"Should be 'HH.MM.SS.mmm' (hours, minutes, seconds, microseconds)."
        )


if __name__ == "__main__":
    main()
