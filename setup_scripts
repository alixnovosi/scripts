#!/usr/bin/env python3

import argparse
import os
import platform
import sys


def run(*, force):
    """run script-linking script."""

    print(
        "determining necessary XDG env vars..."
        "\n"
    )

    home = os.path.expanduser("~")
    system_os = platform.system()

    # retrieve xdg_data_home if it exists.
    # otherwise, set a sensible default.
    xdg_data_home = os.environ.get("XDG_DATA_HOME")
    if xdg_data_home is None:

        if system_os == "Darwin":
            xdg_data_home = os.path.join(home, "Library")

        elif system_os == "Linux" or os == "FreeBSD":
            xdg_data_home = os.path.join(home, ".local", "share")

        else:
            print(f"OS {system_os} currently unsupported!")
            sys.exit(1)

    print(
        f"XDG_DATA_HOME set to {xdg_data_home}. "
        "scripts will be placed in {xdg_data_home}/bin"
    )

    bin_dir = os.path.join(xdg_data_home, "bin")

    if os.path.isdir(bin_dir):
        print(f"bin dir {bin_dir} exists as a directory, good")

    elif os.path.isfile(xdg_data_home):
        print(f"bin dir {bin_dir} is a file! please remove it")
        sys.exit(1)

    else:
        print(f"bin dir {bin_dir} does not exist, creating...")
        os.makedirs(os.path.join(xdg_data_home, "bin"))

    print(f"bin dir {bin_dir} is ready")

    scripts_dir = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        "bin",
    )

    print(
        "\n"
        f"linking all scripts in {scripts_dir} into {bin_dir}..."
        "\n"
    )

    scripts = sorted([
        os.path.join(scripts_dir, file)
        for file in os.listdir(scripts_dir)
        if os.path.isfile(os.path.join(scripts_dir, file))
    ])

    for script in scripts:

        basename = os.path.basename(script)
        possible_existing = os.path.join(bin_dir, basename)

        print(possible_existing)
        print(f"\ntrying to process {basename}...")
        if os.path.isdir(possible_existing):
            print(
                f"found a directory (?) named {basename} in "
                f"{bin_dir} already, skipping"
            )

        elif os.path.isfile(possible_existing) or \
                os.path.islink(possible_existing):

            if force:
                os.remove(possible_existing)
                os.symlink(script, possible_existing)

                print(
                    f"link {possible_existing} -> {script} created, "
                    "replacing old link"
                )

            else:
                print(
                    f"found a file or symlink named {basename} "
                    f"in {bin_dir} already, skipping"
                )

        else:
            os.symlink(script, possible_existing)
            print(
                f"link {possible_existing} -> {script} created"
            )

    print("done!")


def main():
    parser = argparse.ArgumentParser(
        description="link scripts from repo into $XDG_DATA_HOME/bin",
    )

    parser.add_argument(
        "--force",
        action="store_true",
        help=(
            "overwrite existing symlinks in $XDG_DATA_HOME/bin when we are "
            "symlinking files from this git repo."
        ),
        default=False,
    )

    args = parser.parse_args()

    run(force=args.force)


if __name__ == "__main__":
    main()
